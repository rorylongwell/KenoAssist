// <auto-generated />
using Keno.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Keno.Data.Migrations
{
    [DbContext(typeof(KenoContext))]
    partial class KenoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Keno.Data.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Forename");

                    b.Property<string>("Location");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Keno.Data.ClientCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientConditions");
                });

            modelBuilder.Entity("Keno.Data.ClientDrink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<long>("DrinkId");

                    b.Property<long>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DrinkId");

                    b.ToTable("ClientDrinks");
                });

            modelBuilder.Entity("Keno.Data.ClientFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<long>("FoodId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FoodId");

                    b.ToTable("ClientFoods");
                });

            modelBuilder.Entity("Keno.Data.ClientIncident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<long>("IncidentId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IncidentId");

                    b.ToTable("ClientIncidents");
                });

            modelBuilder.Entity("Keno.Data.ClientInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientInformations");
                });

            modelBuilder.Entity("Keno.Data.Drink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Name");

                    b.HasKey("Id");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("Keno.Data.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Name");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Keno.Data.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Injury");

                    b.HasKey("Id");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("Keno.Data.IncidentPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("IncidentId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.ToTable("IncidentPhotos");
                });

            modelBuilder.Entity("Keno.Data.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateRead");

                    b.Property<DateTime>("DateSent");

                    b.Property<long>("FromUserId");

                    b.Property<string>("MessageContent");

                    b.Property<long>("ToUserId");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Keno.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Forename");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("Surname");

                    b.Property<long>("UserTypeId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Keno.Data.UserIncident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("IncidentId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserIncidents");
                });

            modelBuilder.Entity("Keno.Data.UserType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Keno.Data.ClientCondition", b =>
                {
                    b.HasOne("Keno.Data.Client", "Client")
                        .WithMany("ClientConditions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.ClientDrink", b =>
                {
                    b.HasOne("Keno.Data.Client", "Client")
                        .WithMany("ClientDrinks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keno.Data.Drink", "Drink")
                        .WithMany("ClientDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.ClientFood", b =>
                {
                    b.HasOne("Keno.Data.Client", "Client")
                        .WithMany("ClientFoods")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keno.Data.Food", "Food")
                        .WithMany("ClientFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.ClientIncident", b =>
                {
                    b.HasOne("Keno.Data.Client", "Client")
                        .WithMany("ClientIncidents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keno.Data.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.ClientInformation", b =>
                {
                    b.HasOne("Keno.Data.Client", "Client")
                        .WithMany("ClientInformations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.IncidentPhoto", b =>
                {
                    b.HasOne("Keno.Data.Incident", "Incident")
                        .WithMany("IncidentPhoto")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.User", b =>
                {
                    b.HasOne("Keno.Data.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keno.Data.UserIncident", b =>
                {
                    b.HasOne("Keno.Data.Incident", "Incident")
                        .WithMany("UserIncident")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keno.Data.User", "User")
                        .WithMany("UserIncidents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
